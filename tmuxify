#!/usr/bin/env sh

VERSION=$(cat "$(dirname "$0")/VERSION" 2>/dev/null || echo "unknown")
REPO_URL="https://raw.githubusercontent.com/mustafamohsen/tmuxify/main/tmuxify"

CUSTOM_CONFIG=""

while [ $# -gt 0 ]; do
  case "$1" in
    --version|-v)
      echo "tmuxify version $VERSION"
      exit 0
      ;;
    --help|-h)
      echo "Usage: tmuxify [--version|-v] [--update|-u] [--help|-h] [--list|-l] [--file|-f LAYOUT_FILE]"
      echo
      echo "  --version, -v            Show version"
      echo "  --update, -u             Download latest version"
      echo "  --help, -h               Show help"
      echo "  --list, -l               List active tmux sessions"
      echo "  --file, -f LAYOUT_FILE   Use specific layout file (overrides .tmuxify.yml)"
      exit 0
      ;;
    --update|-u)
      echo "Updating tmuxify..."
      TEMP_FILE=$(mktemp)
      if curl -fsSL "$REPO_URL" -o "$TEMP_FILE"; then
        if [ -s "$TEMP_FILE" ]; then
          SCRIPT_PATH=$(command -v "$0") || SCRIPT_PATH="$0"
          INSTALL_DIR=$(dirname "$SCRIPT_PATH")
          INSTALL_PATH="$INSTALL_DIR/$(basename "$SCRIPT_PATH")"

          if [ -w "$INSTALL_DIR" ] && [ -w "$INSTALL_PATH" ]; then
              if mv "$TEMP_FILE" "$INSTALL_PATH" && chmod +x "$INSTALL_PATH"; then
                echo "‚úÖ tmuxify updated successfully to version $($INSTALL_PATH --version | cut -d ' ' -f 3)"
                exit 0
              else
                echo "‚ùå Failed to move updated script to $INSTALL_PATH."
                rm -f "$TEMP_FILE"
                exit 1
              fi
          else
             echo "‚ùå Insufficient permissions to write to $INSTALL_PATH."
             echo "   Attempting update using sudo..."
             if sudo mv "$TEMP_FILE" "$INSTALL_PATH" && sudo chmod +x "$INSTALL_PATH"; then
                 echo "‚úÖ tmuxify updated successfully using sudo to version $($INSTALL_PATH --version | cut -d ' ' -f 3)"
                 exit 0
             else
                 echo "‚ùå Failed to update using sudo."
                 [ -f "$TEMP_FILE" ] && rm -f "$TEMP_FILE"
                 exit 1
             fi
          fi
        else
          echo "‚ùå Downloaded file is empty. Update failed."
          rm -f "$TEMP_FILE"
          exit 1
        fi
      else
        echo "‚ùå Failed to download the latest version from $REPO_URL"
        [ -f "$TEMP_FILE" ] && rm -f "$TEMP_FILE"
        exit 1
      fi
      ;;
    --list|-l)
      echo "Active tmux sessions:"
      tmux list-sessions || echo "No active tmux sessions found."
      exit 0
      ;;
    --file|-f)
      if [ -n "$2" ] && [ "${2#-}" = "$2" ]; then
        CUSTOM_CONFIG="$2"
        shift
      else
        echo "‚ùå Error: Missing file path after --file/-f flag"
        exit 1
      fi
      ;;
    *)
      echo "‚ùå Unknown option: $1"
      echo "Run 'tmuxify --help' for usage information."
      exit 1
      ;;
  esac
  shift
done

command -v yq >/dev/null || { echo "‚ùå Error: yq is required but not found. Please install it (https://github.com/mikefarah/yq)."; exit 1; }
command -v tmux >/dev/null || { echo "‚ùå Error: tmux is required but not found. Please install it (https://github.com/tmux/tmux)."; exit 1; }

WORKDIR=$(pwd)
DEFAULT_CONFIG_FILE="$WORKDIR/.tmuxify.yml"

if [ -n "$CUSTOM_CONFIG" ]; then
  if [ ! -f "$CUSTOM_CONFIG" ] || [ ! -r "$CUSTOM_CONFIG" ]; then
    echo "‚ùå Error: Specified layout file '$CUSTOM_CONFIG' does not exist or is not readable"
    exit 1
  fi
  
  CONFIG_FILE="$CUSTOM_CONFIG"
  echo "‚ÑπÔ∏è Using custom layout file: $CONFIG_FILE"
else
  CONFIG_FILE="$DEFAULT_CONFIG_FILE"
fi

# Generate session name from directory path
auto_session_name=$(basename "$WORKDIR")
if [ "$auto_session_name" = "/" ]; then
    parent_dir=$(basename "$(dirname "$WORKDIR")")
    if [ -z "$parent_dir" ]; then
        auto_session_name="root"
    else
        auto_session_name=$(echo "$WORKDIR" | sed 's|/$||' | sed 's|.*/||')
     fi
fi

auto_session_name=$(echo "$auto_session_name" | sed 's/\./_/g; s/[^a-zA-Z0-9_-][^a-zA-Z0-9_-]*/_/g; s/^_//; s/_$//')
if [ -z "$auto_session_name" ]; then
    auto_session_name="tmuxify_session"
fi

# Set session name from config or use auto-generated name
if [ -f "$CONFIG_FILE" ]; then
  session_name=$(yq -r '.session.name // ""' "$CONFIG_FILE")
  if [ "$session_name" = "null" ] || [ -z "$session_name" ]; then
    session_name="$auto_session_name"
    echo "‚ÑπÔ∏è Using auto-generated session name: $session_name"
  else
     echo "‚ÑπÔ∏è Using session name from config: $session_name"
  fi
else
  session_name="$auto_session_name"
  echo "‚ÑπÔ∏è No layout file found. Using auto-generated session name: $session_name"
fi

# Attach to existing session if it exists
if tmux has-session -t "$session_name" 2>/dev/null; then
  echo "‚úÖ Attaching to existing session: $session_name"
  exec tmux attach -t "$session_name"
fi

echo "üöÄ Creating new session: $session_name"

# Load default layout if no config exists
if [ ! -f "$CONFIG_FILE" ]; then
  create_default_layout() {
    echo " L-> Using default 4-pane layout."
    tmux new-session -d -s "$session_name" -c "$WORKDIR" "nvim ." # Pane 0.0 (editor)
    tmux set-window-option -t "$session_name:0" aggressive-resize on
    tmux split-window -h -t "$session_name:0.0" -c "$WORKDIR"     # Pane 0.1
    tmux resize-pane -t "$session_name:0.0" -x "50%"              
    tmux split-window -v -t "$session_name:0.1" -c "$WORKDIR"     # Pane 0.2
    tmux resize-pane -t "$session_name:0.1" -y "50%"              
    tmux split-window -h -t "$session_name:0.2" -c "$WORKDIR"     # Pane 0.3
    tmux resize-pane -t "$session_name:0.2" -x "50%"             
    tmux send-keys -t "$session_name:0.1" "echo 'Top Right Pane (e.g., aider)'" C-m
    tmux send-keys -t "$session_name:0.2" "echo 'Bottom Left (e.g., lazygit)'" C-m
    tmux send-keys -t "$session_name:0.3" "clear && echo 'Bottom Right (terminal)'" C-m
    tmux select-pane -t "$session_name:0.0"
  }

  create_default_layout
  exec tmux attach -t "$session_name"
  exit 0
fi

# Create the initial session with a temporary pane
tmux new-session -d -s "$session_name" -c "$WORKDIR"
echo " L-> Building layout from $CONFIG_FILE..."
tmux set-window-option -t "$session_name:0" aggressive-resize on

# Set up pane id to index mapping
if [ -n "$BASH_VERSION" ] || [ -n "$ZSH_VERSION" ]; then
    declare -A pane_id_map
else
    echo "‚ö†Ô∏è Warning: Using POSIX sh. Pane IDs should be valid shell variable names (e.g., 'editor', 'my_pane_1')."
fi

# Map pane ID to pane index
set_pane_index() {
    local pane_id="$1"
    local pane_index="$2"
    if [ -z "$pane_id" ] || [ "$pane_id" = "null" ]; then return; fi

    local safe_pane_id=$(echo "$pane_id" | sed 's/[^a-zA-Z0-9_]/_/g')
    if [ "$pane_id" != "$safe_pane_id" ]; then
         echo "‚ö†Ô∏è Warning: Pane ID '$pane_id' sanitized to '$safe_pane_id' for variable mapping."
    fi

    if [ -n "$BASH_VERSION" ] || [ -n "$ZSH_VERSION" ]; then
        pane_id_map["$safe_pane_id"]="$pane_index"
    else
        eval "${safe_pane_id}_pane_index=\"$pane_index\""
    fi
}

# Get pane index from ID
get_pane_index() {
    local pane_id="$1"
    if [ -z "$pane_id" ] || [ "$pane_id" = "null" ]; then echo ""; return; fi

    local safe_pane_id=$(echo "$pane_id" | sed 's/[^a-zA-Z0-9_]/_/g')

    if [ -n "$BASH_VERSION" ] || [ [ -n "$ZSH_VERSION" ] && type -A pane_id_map > /dev/null 2>&1 ]; then
        echo "${pane_id_map[$safe_pane_id]}"
    else
        eval echo \"\$${safe_pane_id}_pane_index\"
    fi
}

# Recursively build the layout from configuration
build_layout() {
  local parent_id="$1"
  local layout_path="$2"
  local parent_index="$3"

  local layout_type
  local count
  local i
  local item_path
  local current_index
  local split_type
  local has_type has_command size size_percent
  local pane_command pane_id

  layout_type=$(yq -r "$layout_path.type" "$CONFIG_FILE")
  count=$(yq -r "$layout_path.splits | length" "$CONFIG_FILE")
  
  for i in $(seq 0 $((count - 1))); do
    item_path="$layout_path.splits[$i]"

    if [ "$i" -eq 0 ]; then
      current_index="$parent_index"
    else
      split_type=""
      if [ "$layout_type" = "horizontal" ]; then
        split_type="-h"
      elif [ "$layout_type" = "vertical" ]; then
        split_type="-v"
      else
          echo "‚ùå Error: Invalid layout type '$layout_type' at path '$layout_path'. Must be 'horizontal' or 'vertical'."
          tmux kill-session -t "$session_name" 2>/dev/null
          exit 1
      fi

      current_index=$(tmux split-window $split_type -t "$session_name:$parent_index" -c "$WORKDIR" -P -F "#{window_index}.#{pane_index}")
      if [ -z "$current_index" ]; then
          echo "‚ùå Error: Failed to split window for pane $parent_index. Check tmux logs."
          tmux kill-session -t "$session_name" 2>/dev/null
          exit 1
      fi
    fi

    has_type=$(yq -r "$item_path | has(\"type\")" "$CONFIG_FILE")
    has_command=$(yq -r "$item_path | has(\"command\")" "$CONFIG_FILE")
    pane_id=$(yq -r "$item_path.id // \"null\"" "$CONFIG_FILE")

    # Apply sizing to newly created panes (except the last one)
    if [ "$i" -lt "$((count - 1))" ]; then
        size=$(yq -r "$item_path.size // \"\"" "$CONFIG_FILE")
        if [ -n "$size" ]; then
            size_percent=$(echo "$size" | sed 's/%//g')

            if ! echo "$size_percent" | grep -Eq '^[0-9]+$'; then
                echo "‚ö†Ô∏è Warning: Invalid size '$size' for item $i at '$item_path'. Must be a percentage (e.g., '50%'). Skipping resize."
            else
                if [ "$layout_type" = "horizontal" ]; then
                    tmux resize-pane -t "$session_name:$current_index" -x "$size_percent%"
                elif [ "$layout_type" = "vertical" ]; then
                    tmux resize-pane -t "$session_name:$current_index" -y "$size_percent%"
                fi
            fi
        else
            echo "‚ö†Ô∏è Warning: Missing 'size' for item $i at '$item_path' (not the last item). Equal distribution assumed by tmux."
        fi
    fi

    # Process nested layouts recursively
    if [ "$has_type" = "true" ]; then
      build_layout "$parent_id-$i" "$item_path" "$current_index"
    fi

    # Execute commands if specified
    if [ "$has_command" = "true" ]; then
      pane_command=$(yq -r "$item_path.command" "$CONFIG_FILE")
      tmux send-keys -t "$session_name:$current_index" "$pane_command" C-m

      if [ "$pane_id" != "null" ]; then
        set_pane_index "$pane_id" "$current_index"
      fi
    fi

    # Handle basic panes with IDs but no commands
    if [ "$has_type" = "false" ] && [ "$has_command" = "false" ]; then
        if [ "$pane_id" != "null" ]; then
            set_pane_index "$pane_id" "$current_index"
        fi
    fi

  done
}

# Start building the layout from the root
build_layout "root" ".layout" "0.0"

# Set focus to the initial pane if specified
initial_focus=$(yq -r '.session.initial_focus // ""' "$CONFIG_FILE")
focus_pane_index=""
if [ -n "$initial_focus" ] && [ "$initial_focus" != "null" ]; then
  focus_pane_index=$(get_pane_index "$initial_focus")
  if [ -n "$focus_pane_index" ]; then
    echo " L-> Setting initial focus to pane ID '$initial_focus' (index $focus_pane_index)."
    tmux select-pane -t "$session_name:$focus_pane_index"
  else
    echo "‚ö†Ô∏è Warning: Initial focus pane ID '$initial_focus' not found in the layout definition. Focusing first pane (0.0)."
    tmux select-pane -t "$session_name:0.0"
  fi
else
  echo " L-> Setting initial focus to first pane (0.0)."
  tmux select-pane -t "$session_name:0.0"
fi

# Attach to the session
echo "‚úÖ Session '$session_name' created successfully. Attaching..."
exec tmux attach -t "$session_name"
